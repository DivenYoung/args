/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    testImplementation("org.assertj:assertj-core:3.16.1")
}

checkstyle {
    ignoreFailures = false
    toolVersion = 8.27
    configFile file("$project.rootDir/checkstyle.xml")
    sourceSets = [sourceSets.main]
}

checkstyleTest.enabled = false

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it)
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 1
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
